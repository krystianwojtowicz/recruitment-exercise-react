{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","condition","setCondition","name","preparation_time","type","no_of_slices","diameter","spiciness_scale","slices_of_bread","value","setValue","dishes","handle","e","newvalue","target","id","console","log","onSubmit","preventDefault","Axios","post","parseInt","then","res","catch","err","submit","required","onChange","event","htmlFor","step","min","max","ReactDOM","render","document","getElementById","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","StrictMode"],"mappings":"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","file":"static/js/main.75b2622b.chunk.js","sourcesContent":["import './App.css';\nimport ReactDOM from 'react-dom';\nimport DurationInput from 'react-duration';\nimport Axios from 'axios';\n\n// function App() {\n//   return (\n//   <form>\n//     <input id=\"duration-input\" type=\"text\" required pattern=\"[0-9]{2}:[0-9]{2}:[0-9]{2}:[0-9]{2}\" value=\"00:00:00:00\" title=\"Write a duration in the format hh:mm:ss:ms\"></input>\n//   </form>\n//   );\n// }\n\n\n// class MyApp extends React.Component{\n\n//   constructor(props){\n\n//      this.state = {\n//          duration: 125.4 // Duration values are given in seconds.\n//      }\n//   }\n\n//   render(){\n\n//       return (    \n//           <DurationInput\n//               value={ this.state.duration }\n//               onChange={ new_duration=> this.setState({duration: new_duration}) }\n//           />\n//       );\n//   }\n// }\n\nimport { TimeDurationInput } from 'react-time-duration-input'\nimport React, { useState } from \"react\";\n\n// function MyApp () {\n//   const [ value, setValue ] = useState(2443332000)\n\n//   return (<TimeDurationInput value={value} onChange={setValue} />)\n// }\n\n// import TimeField from 'react-simple-timefield';\n\n// class App extends React.Component {\n//   constructor(...args) {\n//     super(...args);\n\n//     this.state = {\n//       time: '00:00:00'\n//     };\n\n//     this.onTimeChange = this.onTimeChange.bind(this);\n//   }\n\n//   onTimeChange(event, time) {\n//     this.setState({time});\n//   }\n\n//   render() {\n//     const {time} = this.state;\n\n//     return (\n//       <TimeField value={time} onChange={this.onTimeChange} />\n//     );\n//   }\n// }\n\n\nconst App = () => {\n  const url = 'https://frosty-wood-6558.getsandbox.com:443/dishes'\n  const [condition, setCondition] = useState('')\n  // const [value, setValue] = React.useState(\"00:00:00\");\n  const [value, setValue] = useState({\n    name: '', preparation_time: '00:00:00', type: '', no_of_slices: '', diameter: '', spiciness_scale: '', slices_of_bread: ''\n  });\n  let dishes = ['pizza', 'soup', 'sandwich'];\n\n  // const set = name => {\n  //   return ({ target: { value } }) => {\n  //     setValues(oldValues => ({ ...oldValues, [name]: value }));\n  //   }\n  // };\n\n  // const onChange = (event) => {\n  //   setValue(event.target.value);\n  // };\n\n  // const onBlur = (event) => {\n  //   const value = event.target.value;\n  //   const seconds = Math.max(0, getSecondsFromHHMMSS(value));\n\n  //   const time = toHHMMSS(seconds);\n  //   setValue(time);\n  // };\n\n  // const getSecondsFromHHMMSS = (value) => {\n  //   const [str1, str2, str3] = value.split(\":\");\n\n  //   const val1 = Number(str1);\n  //   const val2 = Number(str2);\n  //   const val3 = Number(str3);\n\n  //   if (!isNaN(val1) && isNaN(val2) && isNaN(val3)) {\n  //     return val1;\n  //   }\n\n  //   if (!isNaN(val1) && !isNaN(val2) && isNaN(val3)) {\n  //     return val1 * 60 + val2;\n  //   }\n\n  //   if (!isNaN(val1) && !isNaN(val2) && !isNaN(val3)) {\n  //     return val1 * 60 * 60 + val2 * 60 + val3;\n  //   }\n\n  //   return 0;\n  // };\n\n  // const toHHMMSS = (secs) => {\n  //   const secNum = parseInt(secs.toString(), 10);\n  //   const hours = Math.floor(secNum / 3600);\n  //   const minutes = Math.floor(secNum / 60) % 60;\n  //   const seconds = secNum % 60;\n\n  //   return [hours, minutes, seconds]\n  //     .map((val) => (val < 10 ? `0${val}` : val))\n  // .filter((val, index) => val !== \"00\" || index > 0)\n  // .join(\":\")\n  // .replace(/^0/, \"\");\n  // };\n\n  //   const Condition = (value) => {\n  //     if (currentUser) {\n  //       return <Home />;\n  //     }\n  //     return <Landing />;\n  // };\n  function handle(e) {\n    const newvalue = { ...value }\n    newvalue[e.target.id] = e.target.value\n    setValue(newvalue)\n    console.log(newvalue)\n  }\n\n  function submit(e) {\n    e.preventDefault();\n    Axios.post(url, {\n      name: value.name,\n      preparation_time: value.preparation_time,\n      type: value.type,\n      no_of_slices: parseInt(value.no_of_slices),\n      diameter: parseInt(value.diameter),\n      spiciness_scale: parseInt(value.spiciness_scale),\n      slices_of_bread: parseInt(value.slices_of_bread)\n    })\n      .then(res => {\n        console.log(res.value)\n      })\n      .catch(err => {\n        console.log(err);\n      })\n  }\n\n\n\n  return (\n    <>\n      <form onSubmit={(e) => submit(e)}>\n        <div>\n          <input type=\"text\" name=\"name\" required\n            // onChange={set('name')} \n            onChange={(e) => handle(e)} id='name' value={value.name}\n          />\n        </div>\n        <div>\n          <input type=\"text\" required onChange={(e) => handle(e)} id='preparation_time' value={value.preparation_time}\n          // onChange={set('time')}\n          //  onChange={onChange}\n          //  onBlur={onBlur}\n          // value={value} \n          />\n        </div>\n        <div>\n          <p>Select dish type:</p>\n          {/* <input type=\"radio\" name=\"dish-type\" value=\"pizza\" />pizza<br />\n        <input type=\"radio\" name=\"dish-type\" value=\"soup\" />soup<br />\n        <input type=\"radio\" name=\"dish-type\" value=\"sandwich\" />sandwich<br /> */}\n          {/* {dishes.map(result => (\n            <div key={result}>\n              <input onChange={(event) => setCondition(event.target.value)} type=\"radio\" value={result} />\n              <b>{result}</b>\n            </div>\n          ))} */}\n          {/* {dishes.map(result => (\n              <option onChange={(event) => setCondition(event.target.value)} value={result} >\n              <b>{result}</b>\n              </option>\n            \n          ))} */}\n          {/* <select name=\"dishes\" id=\"dishes\" required>\n            {dishes.map(result => (\n              <option key={result} onChange={(event) => setCondition(event.target.value)} value={result} >\n              <b>{result}</b>\n              </option>\n            \n          ))}\n          </select> */}\n          <select name=\"dishes\" required onChange={(event) => {setCondition(event.target.value); handle(event)}} \n          // onChange={(e) => handle(e)} \n          id='type' value={value.type} >\n            <option value=\"\">None</option>\n            <option value=\"pizza\">pizza</option>\n            <option value=\"soup\">soup</option>\n            <option value=\"sandwich\">sandwich</option>\n          </select>\n          {condition === dishes[0] &&\n            <div>\n              <label htmlFor=\"quantity\">no_of_slices:</label>\n              <input type=\"number\" name=\"quantity\" required onChange={(e) => handle(e)} id='no_of_slices' value={value.no_of_slices}/>\n              <label htmlFor=\"quantity\">diameter:</label>\n              <input type=\"number\" step=\"0.01\" required onChange={(e) => handle(e)} id='diameter' value={value.diameter}/>\n            </div>}\n\n          {condition === dishes[1] &&\n            <div>\n              <label htmlFor=\"quantity\">spiciness_scale:</label>\n              <input type=\"number\" name=\"quantity\" min=\"1\" max=\"10\" required onChange={(e) => handle(e)} id='spiciness_scale' value={value.spiciness_scale}/>\n            </div>}\n\n          {condition === dishes[2] &&\n            <div>\n              <label htmlFor=\"quantity\">slices_of_bread:</label>\n              <input type=\"number\" name=\"quantity\" required onChange={(e) => handle(e)} id='slices_of_bread' value={value.slices_of_bread}/>\n            </div>}\n          <button>Submit</button>\n        </div>\n      </form>\n    </>\n  );\n};\n\nReactDOM.render(\n  <div>\n    <App />\n  </div>,\n  document.getElementById(\"root\")\n);\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}