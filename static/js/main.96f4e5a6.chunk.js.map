{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","condition","setCondition","name","preparation_time","type","no_of_slices","diameter","spiciness_scale","slices_of_bread","value","setValue","dishes","handle","e","newvalue","target","id","console","log","onSubmit","preventDefault","Axios","post","parseInt","then","res","catch","err","submit","required","onChange","event","htmlFor","step","min","max","ReactDOM","render","document","getElementById","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","StrictMode"],"mappings":"yOAMMA,EAAM,WACV,IACA,EAAkCC,mBAAS,IAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAA0BF,mBAAS,CACjCG,KAAM,GAAIC,iBAAkB,WAAYC,KAAM,GAAIC,aAAc,GAAIC,SAAU,GAAIC,gBAAiB,GAAIC,gBAAiB,KAD1H,mBAAOC,EAAP,KAAcC,EAAd,KAGIC,EAAS,CAAC,QAAS,OAAQ,YAG/B,SAASC,EAAOC,GACd,IAAMC,EAAQ,eAAQL,GACtBK,EAASD,EAAEE,OAAOC,IAAMH,EAAEE,OAAON,MACjCC,EAASI,GACTG,QAAQC,IAAIJ,GAsBd,OACE,mCACE,uBAAMK,SAAU,SAACN,GAAD,OArBpB,SAAgBA,GACdA,EAAEO,iBACFC,IAAMC,KAjBI,qDAiBM,CACdpB,KAAMO,EAAMP,KACZC,iBAAkBM,EAAMN,iBACxBC,KAAMK,EAAML,KACZC,aAAckB,SAASd,EAAMJ,cAC7BC,SAAUiB,SAASd,EAAMH,UACzBC,gBAAiBgB,SAASd,EAAMF,iBAChCC,gBAAiBe,SAASd,EAAMD,mBAE/BgB,MAAK,SAAAC,GACJR,QAAQC,IAAIO,EAAIhB,UAEjBiB,OAAM,SAAAC,GACLV,QAAQC,IAAIS,MAMSC,CAAOf,IAA9B,UACE,8BACE,uBAAOT,KAAK,OAAOF,KAAK,OAAO2B,UAAQ,EACrCC,SAAU,SAACjB,GAAD,OAAOD,EAAOC,IAAIG,GAAG,OAAOP,MAAOA,EAAMP,SAGvD,8BACE,uBAAOE,KAAK,OAAOyB,UAAQ,EAACC,SAAU,SAACjB,GAAD,OAAOD,EAAOC,IAAIG,GAAG,mBAAmBP,MAAOA,EAAMN,qBAE7F,gCACE,kDACA,yBAAQD,KAAK,SAAS2B,UAAQ,EAACC,SAAU,SAACC,GAAW9B,EAAa8B,EAAMhB,OAAON,OAAQG,EAAOmB,IAC9Ff,GAAG,OAAOP,MAAOA,EAAML,KADvB,UAEE,wBAAQK,MAAM,GAAd,kBACA,wBAAQA,MAAM,QAAd,mBACA,wBAAQA,MAAM,OAAd,kBACA,wBAAQA,MAAM,WAAd,yBAEDT,IAAcW,EAAO,IACpB,gCACE,uBAAOqB,QAAQ,WAAf,2BACA,uBAAO5B,KAAK,SAASF,KAAK,WAAW2B,UAAQ,EAACC,SAAU,SAACjB,GAAD,OAAOD,EAAOC,IAAIG,GAAG,eAAeP,MAAOA,EAAMJ,eACzG,uBAAO2B,QAAQ,WAAf,uBACA,uBAAO5B,KAAK,SAAS6B,KAAK,OAAOJ,UAAQ,EAACC,SAAU,SAACjB,GAAD,OAAOD,EAAOC,IAAIG,GAAG,WAAWP,MAAOA,EAAMH,cAGpGN,IAAcW,EAAO,IACpB,gCACE,uBAAOqB,QAAQ,WAAf,8BACA,uBAAO5B,KAAK,SAASF,KAAK,WAAWgC,IAAI,IAAIC,IAAI,KAAKN,UAAQ,EAACC,SAAU,SAACjB,GAAD,OAAOD,EAAOC,IAAIG,GAAG,kBAAkBP,MAAOA,EAAMF,qBAGhIP,IAAcW,EAAO,IACpB,gCACE,uBAAOqB,QAAQ,WAAf,8BACA,uBAAO5B,KAAK,SAASF,KAAK,WAAW2B,UAAQ,EAACC,SAAU,SAACjB,GAAD,OAAOD,EAAOC,IAAIG,GAAG,kBAAkBP,MAAOA,EAAMD,qBAEhH,wBAAQJ,KAAK,SAAb,6BAOVgC,IAASC,OACP,8BACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAIXzC,QCnFA0C,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBlB,MAAK,YAAkD,IAA/CmB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdL,IAASC,OACP,cAAC,IAAMW,WAAP,UACE,cAAC,EAAD,MAEFV,SAASC,eAAe,SAM1BC,M","file":"static/js/main.96f4e5a6.chunk.js","sourcesContent":["import './App.css';\nimport ReactDOM from 'react-dom';\nimport Axios from 'axios';\nimport React, { useState } from \"react\";\n\n\nconst App = () => {\n  const url = 'https://frosty-wood-6558.getsandbox.com:443/dishes'\n  const [condition, setCondition] = useState('')\n  const [value, setValue] = useState({\n    name: '', preparation_time: '00:00:00', type: '', no_of_slices: '', diameter: '', spiciness_scale: '', slices_of_bread: ''\n  });\n  let dishes = ['pizza', 'soup', 'sandwich'];\n\n  \n  function handle(e) {\n    const newvalue = { ...value }\n    newvalue[e.target.id] = e.target.value\n    setValue(newvalue)\n    console.log(newvalue)\n  }\n\n  function submit(e) {\n    e.preventDefault();\n    Axios.post(url, {\n      name: value.name,\n      preparation_time: value.preparation_time,\n      type: value.type,\n      no_of_slices: parseInt(value.no_of_slices),\n      diameter: parseInt(value.diameter),\n      spiciness_scale: parseInt(value.spiciness_scale),\n      slices_of_bread: parseInt(value.slices_of_bread)\n    })\n      .then(res => {\n        console.log(res.value)\n      })\n      .catch(err => {\n        console.log(err);\n      })\n  }\n\n  return (\n    <>\n      <form onSubmit={(e) => submit(e)}>\n        <div>\n          <input type=\"text\" name=\"name\" required\n            onChange={(e) => handle(e)} id='name' value={value.name}\n          />\n        </div>\n        <div>\n          <input type=\"text\" required onChange={(e) => handle(e)} id='preparation_time' value={value.preparation_time}/>\n        </div>\n        <div>\n          <p>Select dish type:</p>\n          <select name=\"dishes\" required onChange={(event) => {setCondition(event.target.value); handle(event)}} \n          id='type' value={value.type} >\n            <option value=\"\">None</option>\n            <option value=\"pizza\">pizza</option>\n            <option value=\"soup\">soup</option>\n            <option value=\"sandwich\">sandwich</option>\n          </select>\n          {condition === dishes[0] &&\n            <div>\n              <label htmlFor=\"quantity\">no_of_slices:</label>\n              <input type=\"number\" name=\"quantity\" required onChange={(e) => handle(e)} id='no_of_slices' value={value.no_of_slices}/>\n              <label htmlFor=\"quantity\">diameter:</label>\n              <input type=\"number\" step=\"0.01\" required onChange={(e) => handle(e)} id='diameter' value={value.diameter}/>\n            </div>}\n\n          {condition === dishes[1] &&\n            <div>\n              <label htmlFor=\"quantity\">spiciness_scale:</label>\n              <input type=\"number\" name=\"quantity\" min=\"1\" max=\"10\" required onChange={(e) => handle(e)} id='spiciness_scale' value={value.spiciness_scale}/>\n            </div>}\n\n          {condition === dishes[2] &&\n            <div>\n              <label htmlFor=\"quantity\">slices_of_bread:</label>\n              <input type=\"number\" name=\"quantity\" required onChange={(e) => handle(e)} id='slices_of_bread' value={value.slices_of_bread}/>\n            </div>}\n          <button type=\"submit\">Submit</button>\n        </div>\n      </form>\n    </>\n  );\n};\n\nReactDOM.render(\n  <div>\n    <App />\n  </div>,\n  document.getElementById(\"root\")\n);\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}